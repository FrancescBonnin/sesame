
This section documents how to build Sesame. 

Prerequisites
..............

Building Sesame requires
 * `Python <http://python.org>`_ 3.4 or above,
 * `SciPy <http://scipy.org>`_ 0.9 or newer,
 * `LAPACK <http://netlib.org/lapack/>`_ and `BLAS <http://netlib.org/blas/>`_,
   (For best performance the free `OpenBLAS
   <http://xianyi.github.com/OpenBLAS/>`_ or the nonfree `MKL
   <http://software.intel.com/en-us/intel-mkl>`_ can be used.)

The following software is highly recommended though not strictly required:
 * `MUMPS <http://graal.ens-lyon.fr/MUMPS/>`_, a sparse linear algebra library
   that will in many cases speed up Sesame several times and reduce the memory
   footprint.  (Sesame uses only the sequential, single core version
   of MUMPS.  The advantages due to MUMPS as used by Sesame are thus independent
   of the number of CPU cores of the machine on which Sesame runs.)
 * `PyMUMPS <https://pypi.python.org/pypi/PyMUMPS>`_, Python bindings for MUMPS
   if MUMPS is used.  This is included in the ``mumps`` directory found in the
   root directory of the distribution. The package is built together with
   Sesame.
 * An environment which allows to compile Python extensions written in C,
   C++ and Fortran.
 * `matplotlib <http://matplotlib.sourceforge.net/>`_ 1.1 or newer, for Sesame's
   plotting routines,


Generic instructions
.....................
Standard build and install
++++++++++++++++++++++++++
Sesame can be built  and installed following the `usual Python conventions
<http://docs.python.org/install/index.html>`_ by running the following commands
in the root directory of the Sesame distribution::

    python3 setup.py build
    python3 setup.py install

Depending on your system, you might have to run the second command with
administrator privileges. The installation
step can be done locally either by using the ``--user`` prefix or by specifying
the location where to install the package files::

    python3 setup.py install --prefix=/path/of/directory

The tutorial examples can be found in the directory ``examples`` inside the root
directory of the Sesame source distribution.


Build configuration
+++++++++++++++++++

The setup script of Sesame is used to link Sesame against MUMPS. The name of the
library installed and its location are configured by editing the file ``setup.cfg`` in the
root directory of the Sesame distribution. 

Building the documentation
+++++++++++++++++++++++++++

To build the documentation, the `Sphinx documentation generator
<http://sphinx.pocoo.org/>`_ is required with ``numpydoc`` extension
(version 0.5 or newer).  If PDF documentation is to be built, the tools
from the `libRSVG <http://live.gnome.org/LibRsvg>`_ (Debian/Ubuntu package
``librsvg2-bin``) are needed to convert SVG drawings into the PDF format.

As a prerequisite for building the documentation, Sesame must have been built
successfully using ``python3 setup.py build`` as described above.  HTML
documentation is built by entering the ``doc`` sub-directory of the Sesame
package and executing ``make html``. Open the file ``index.html`` in the
directory ``_build/html`` with a web browser to access the documentation. PDF
documentation is generated by executing ``make latex`` followed by ``make
latexpdf``.

Because of some quirks of how Sphinx works, it might be necessary to execute
``make clean`` between building HTML and PDF documentation.  If this is not
done, Sphinx may mistakenly use PNG files for PDF output or other problems may
appear.

As an alternative if ``make`` is not available, the documentation can be built
using the command ``python3 setup.py build_sphinx``.

Hints for specific platforms
.............................

Unix-like systems (GNU/Linux)
++++++++++++++++++++++++++++++

Sesame should run on all recent Unix-like systems.  

1. Install the required packages.  

2. Inside the Sesame source distribution's root directory run ::

       python3 setup.py build
       sudo python3 setup.py install

Run ``python3 setup.py --help install`` for installation options.


Microsoft Windows
+++++++++++++++++++
As the only recommended way to compile Python extensions on Windows is using
Visual C++, we are not able to provide guidelines as to how to build with the
MUMPS library. 
